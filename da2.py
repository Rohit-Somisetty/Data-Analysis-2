# -*- coding: utf-8 -*-
"""DA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zry-UZd-c98a6HML3_jjOAnfRIKqPlj8

# Part 2 — Hypothesis Testing, Trend Analysis, and Financial Ratios

This notebook continues the analysis using the same dataset (`financial_health_analysis_dataset.csv`).  
It covers:
- Hypothesis testing (two scenarios)
- P-value interpretation
- Year-over-year (YoY) trend analysis for revenue and profit
- Financial ratios and comparison to benchmarks
- A final Markdown summary section for conclusions and anomalies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Display options
pd.set_option('display.float_format', lambda x: f'{x:,.4f}')

# Load dataset
df = pd.read_csv('financial_health_analysis_dataset.csv')

# Parse Date
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
else:
    raise ValueError("The dataset must contain a 'Date' column.")

# Basic sanity checks
required_cols = {'Revenue','Expenses','Profit','Cash Flow','Debt','Assets','Liabilities'}
missing = required_cols - set(df.columns)
if missing:
    raise ValueError(f"Missing required columns: {missing}")

# Ensure numeric
for c in ['Revenue','Expenses','Profit','Cash Flow','Debt','Assets','Liabilities']:
    df[c] = pd.to_numeric(df[c], errors='coerce')

# Drop rows that are entirely NaN across required fields
df = df.dropna(subset=['Revenue','Expenses','Profit','Cash Flow','Debt','Assets','Liabilities'], how='all')

# Derive helper time columns
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.to_period('M').dt.to_timestamp()

"""
## A. Hypothesis Testing

### Scenario 1: Is the average monthly profit greater than a benchmark?
- **Null (H₀):** μₚ ≤ benchmark  
- **Alt (H₁):** μₚ > benchmark

We'll aggregate profit by month, then apply a one-sample t-test against the benchmark.  
"""

# ---- Parameters ----
PROFIT_BENCHMARK = 10000.0  # change if needed

# Monthly profit (mean by month if multiple rows per month; else it's the monthly value)
monthly_profit = df.groupby('Month', as_index=False)['Profit'].mean().dropna()

# One-sample t-test against benchmark (two-sided), then convert to one-sided
t_stat, p_two_sided = stats.ttest_1samp(monthly_profit['Profit'], popmean=PROFIT_BENCHMARK, nan_policy='omit')

# Convert to one-sided p-value depending on direction of t-stat
if t_stat > 0:
    p_one_sided = p_two_sided / 2
else:
    # if t_stat <= 0, evidence is not in the direction of H1
    p_one_sided = 1.0 - (p_two_sided / 2)

mean_monthly_profit = monthly_profit['Profit'].mean()
n_months = monthly_profit.shape[0]

print(f"Benchmark: {PROFIT_BENCHMARK:,.2f}")
print(f"Mean monthly profit: {mean_monthly_profit:,.2f} (n={n_months})")
print(f"t-statistic: {t_stat:,.4f}")
print(f"One-sided p-value (H1: mean > benchmark): {p_one_sided:,.6f}")
alpha = 0.05
decision = "REJECT H0" if p_one_sided < alpha and t_stat > 0 else "FAIL TO REJECT H0"
print(f"Decision at α={alpha}: {decision}")

"""
### Scenario 2: Are average revenue and expenses significantly different?
Because revenue and expenses are recorded for the **same periods**, we use a **paired t-test**.

- **Null (H₀):** μ₍Revenue−Expenses₎ = 0  
- **Alt (H₁):** μ₍Revenue−Expenses₎ ≠ 0  
"""

# Align by month for a clean matched comparison
monthly = df.groupby('Month', as_index=False).agg({'Revenue':'mean','Expenses':'mean'}).dropna()

# Paired t-test (two-sided)
t_stat_rel, p_val_rel = stats.ttest_rel(monthly['Revenue'], monthly['Expenses'], nan_policy='omit')

diff_mean = (monthly['Revenue'] - monthly['Expenses']).mean()

print(f"Mean(Revenue - Expenses): {diff_mean:,.2f}")
print(f"t-statistic (paired): {t_stat_rel:,.4f}")
print(f"Two-sided p-value: {p_val_rel:,.6f}")
alpha = 0.05
decision = "REJECT H0 (significant difference)" if p_val_rel < alpha else "FAIL TO REJECT H0 (no significant difference)"
print(f"Decision at α={alpha}: {decision}")

"""## B. P-value Interpretation

- The **p-value** represents the probability of observing results at least as extreme as the sample, assuming the **null hypothesis is true**.  
- A **small p-value** (typically < 0.05) indicates the observed effect would be rare if the null were true, leading us to **reject H₀**.  
- A **large p-value** suggests the data are consistent with the null, so we **fail to reject H₀** (not proof that H₀ is true).

## C. Trend Analysis — Year-over-Year (YoY) for Revenue and Profit
We compute annual totals and their YoY growth rates. We also flag unusually large changes using a z-score on growth rates.
"""

# Annual totals
annual = df.groupby('Year', as_index=False).agg({'Revenue':'sum','Profit':'sum'}).sort_values('Year')

# YoY growth rates
annual['Revenue_YoY'] = annual['Revenue'].pct_change()
annual['Profit_YoY'] = annual['Profit'].pct_change()

display(annual)

# Identify periods of significant change using z-scores of growth (drop NA first)
growth_cols = ['Revenue_YoY','Profit_YoY']
growth = annual.dropna(subset=growth_cols).copy()

for col in growth_cols:
    growth[col + '_z'] = (growth[col] - growth[col].mean()) / growth[col].std(ddof=1)

# Flag changes with |z| >= 2 as "significant" (you can adjust threshold)
significant_flags = {}
for col in growth_cols:
    sig_years = growth.loc[growth[col + '_z'].abs() >= 2, 'Year'].tolist()
    significant_flags[col] = sig_years

print("Significant YoY changes (|z| ≥ 2):")
for k, v in significant_flags.items():
    print(f"  {k}: years {v if v else 'None'}")

# Plot annual Revenue and Profit
plt.figure(figsize=(8,5))
plt.plot(annual['Year'], annual['Revenue'], marker='o')
plt.title('Annual Revenue')
plt.xlabel('Year')
plt.ylabel('Revenue')
plt.grid(True)
plt.show()

plt.figure(figsize=(8,5))
plt.plot(annual['Year'], annual['Profit'], marker='o')
plt.title('Annual Profit')
plt.xlabel('Year')
plt.ylabel('Profit')
plt.grid(True)
plt.show()

# Plot YoY growth rates
plt.figure(figsize=(8,5))
plt.plot(annual['Year'], annual['Revenue_YoY'], marker='o')
plt.title('Revenue YoY Growth')
plt.xlabel('Year')
plt.ylabel('Growth Rate')
plt.grid(True)
plt.show()

plt.figure(figsize=(8,5))
plt.plot(annual['Year'], annual['Profit_YoY'], marker='o')
plt.title('Profit YoY Growth')
plt.xlabel('Year')
plt.ylabel('Growth Rate')
plt.grid(True)
plt.show()

"""
## D. Financial Ratios and Insights

We compute:
- **Profit Margin** = Profit / Revenue  
- **Debt-to-Asset Ratio** = Debt / Assets  
- **Current Ratio** = Assets / Liabilities  

Then we compare to configurable **industry benchmarks** (you can change these).
"""

# Compute ratios row-wise
ratios = df.copy()
# Avoid division by zero
ratios['Profit_Margin'] = np.where(ratios['Revenue'] != 0, ratios['Profit'] / ratios['Revenue'], np.nan)
ratios['Debt_To_Asset'] = np.where(ratios['Assets'] != 0, ratios['Debt'] / ratios['Assets'], np.nan)
ratios['Current_Ratio'] = np.where(ratios['Liabilities'] != 0, ratios['Assets'] / ratios['Liabilities'], np.nan)

# Aggregate by year (mean ratios)
ratio_yearly = ratios.groupby('Year', as_index=False)[['Profit_Margin','Debt_To_Asset','Current_Ratio']].mean()

display(ratio_yearly.describe())

# Benchmarks (edit for your industry)
benchmarks = {
    'Profit_Margin': 0.10,   # 10%
    'Debt_To_Asset': 0.50,   # 0.5
    'Current_Ratio': 1.50    # 1.5
}

# Compare latest year averages to benchmarks
latest_year = ratio_yearly['Year'].max()
latest = ratio_yearly.loc[ratio_yearly['Year'] == latest_year, ['Profit_Margin','Debt_To_Asset','Current_Ratio']].squeeze()

print(f"Latest year: {latest_year}")
for k, v in benchmarks.items():
    val = latest[k]
    status = "MEETS/EXCEEDS" if (k != 'Debt_To_Asset' and val >= v) or (k == 'Debt_To_Asset' and val <= v) else "BELOW (or Above for Debt-To-Asset)"
    print(f"  {k}: {val:,.4f} vs benchmark {v:,.4f} -> {status}")

# Visualize ratio trends by year
plt.figure(figsize=(8,5))
plt.plot(ratio_yearly['Year'], ratio_yearly['Profit_Margin'], marker='o')
plt.title('Profit Margin by Year')
plt.xlabel('Year')
plt.ylabel('Profit Margin')
plt.grid(True)
plt.show()

plt.figure(figsize=(8,5))
plt.plot(ratio_yearly['Year'], ratio_yearly['Debt_To_Asset'], marker='o')
plt.title('Debt-to-Asset Ratio by Year')
plt.xlabel('Year')
plt.ylabel('Debt-to-Asset Ratio')
plt.grid(True)
plt.show()

plt.figure(figsize=(8,5))
plt.plot(ratio_yearly['Year'], ratio_yearly['Current_Ratio'], marker='o')
plt.title('Current Ratio by Year')
plt.xlabel('Year')
plt.ylabel('Current Ratio')
plt.grid(True)
plt.show()